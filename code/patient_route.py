# -*- coding: utf-8 -*-
"""Patient_Route.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HCNCTEBV1ZSrkgwkwZ_l9KRk4FTkEpr1
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# CSV 파일 로드
file_path = 'Korea PatientRoute.csv'
data = pd.read_csv(file_path)

from google.colab import drive
drive.mount('/content/drive')

# 'province'가 'Seoul'이고 'city'가 'Gangnam-gu'인 데이터 필터링

gangnam_data = data[(data['province'] == 'Seoul') & (data['city'] == 'Gangnam-gu')]

# type별로 등장 횟수 계산
type_counts = gangnam_data['type'].value_counts()

# 그래프 생성
plt.figure(figsize=(10, 6))
colors = ['red' if label == 'public_transportation' else 'skyblue' for label in type_counts.index]
plt.bar(type_counts.index, type_counts.values, color=colors, edgecolor='black')
plt.title('Type Counts in Gangnam-gu', fontsize=15)
plt.xlabel('Type', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.tight_layout()
plt.show()

gangnam_data = data[(data['province'] == 'Seoul')]

# type별로 등장 횟수 계산
type_counts = gangnam_data['type'].value_counts()

# 그래프 생성
colors = ['red' if label == 'public_transportation' else 'skyblue' for label in type_counts.index]

plt.figure(figsize=(10, 6))
plt.bar(type_counts.index, type_counts.values, color=colors, edgecolor='black')
plt.title('Seoul', fontsize=15)
plt.xlabel('Type', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.tight_layout()
plt.show()

import numpy as np

# type별로 등장 횟수 계산
type_counts = data['type'].value_counts()

colors = ['red' if label == 'public_transportation' else 'skyblue' for label in type_counts.index]
# 그래프 생성
plt.figure(figsize=(10, 6))
plt.bar(type_counts.index, type_counts.values, color=colors, edgecolor='black')
plt.title('Type Counts in KOREA    2020.01~2020.04', fontsize=15)
plt.xlabel('Type', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import os

folder_path = ""

file_names = [f"2020_{str(month).zfill(2)}_t.csv" for month in range(1, 13)]  # 2020_01_t.csv ~ 2020_12_t.csv

monthly_boarding_data = {}

for file_name in file_names:
    file_path = os.path.join(folder_path, file_name)

    if os.path.exists(file_path):
        data = pd.read_csv(file_path)

        boarding_columns = [col for col in data.columns if col.endswith('b')]

        boarding_summary = data[boarding_columns].sum()

        month_name = file_name.split("_")[1]
        monthly_boarding_data[month_name] = boarding_summary

all_months_data = pd.DataFrame(monthly_boarding_data)
all_months_data.index = [col for col in data.columns if col.endswith('b')]  # 시간대 설정 (e.g., 0b, 1b, ...)

plt.figure(figsize=(16, 8))
for month in all_months_data.columns:
    plt.plot(all_months_data.index, all_months_data[month], label=f"{int(month)}month")

plt.title("Monthly BUS-Boarding Counts by Time", fontsize=16)
plt.xlabel("Time (e.g., 0b: Boarding at 0 AM)", fontsize=12)
plt.ylabel("Total Boarding Count", fontsize=12)
plt.xticks(rotation=90)
plt.legend(title="Month", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()

plt.show()

# 2020년을 기준으로 2021년 얼마나 감소했는지 확인

import pandas as pd
import matplotlib.pyplot as plt
import os

def process_yearly_data(folder_path, year):
    """
    주어진 연도의 데이터를 처리하여 시간대별 평균 승차량을 계산.
    """
    if year==2024 :
        file_names = [f"{year}_{str(month).zfill(2)}_t.csv" for month in range(1, 11)]
        monthly_boarding_data = {}
    else :
        file_names = [f"{year}_{str(month).zfill(2)}_t.csv" for month in range(1, 13)]
        monthly_boarding_data = {}
    print(file_names)
    for file_name in file_names:
        file_path = os.path.join(folder_path, file_name)

        if os.path.exists(file_path):
            data = pd.read_csv(file_path)

            # 승차 데이터 필터링
            boarding_columns = [col for col in data.columns if col.endswith('b')]

            # 시간대별 데이터 합산
            boarding_summary = data[boarding_columns].sum()

            # 월 이름 추출 (예: 1월, 2월 ...)
            month_name = file_name.split("_")[1]
            monthly_boarding_data[month_name] = boarding_summary

    # 월별 데이터를 데이터프레임으로 변환
    yearly_data = pd.DataFrame(monthly_boarding_data)
    yearly_data.index = [col for col in data.columns if col.endswith('b')]

    # 시간대별 평균 계산
    print(yearly_data)
    yearly_average = yearly_data.mean(axis=1)

    return yearly_average

# 1. 2020년과 2021년 데이터 경로 설정
folder_path_2019 = "drive/MyDrive/Data/2019_bus_t"  # 2019년 데이터 폴더
folder_path_2020 = "drive/MyDrive/Data/2020_bus_t"  # 2020년 데이터 폴더
folder_path_2021 = "drive/MyDrive/Data/2021_bus_t"  # 2021년 데이터 폴더
folder_path_2022 = "drive/MyDrive/Data/2022_bus_t"  # 2022년 데이터 폴더
folder_path_2023 = "drive/MyDrive/Data/2023_bus_t"  # 2023년 데이터 폴더
folder_path_2024 = "drive/MyDrive/Data/2024_bus_t"  # 2024년 데이터 폴더

average_2019 = process_yearly_data(folder_path_2019, 2019)
print("2019 complete")
average_2020 = process_yearly_data(folder_path_2020, 2020)
print("2020 complete")
average_2021 = process_yearly_data(folder_path_2021, 2021)
print("2021 complete")
average_2022 = process_yearly_data(folder_path_2022, 2022)
print("2022 complete")
average_2023 = process_yearly_data(folder_path_2023, 2023)
print("2023 complete")
average_2024 = process_yearly_data(folder_path_2024, 2024)
print("2024 complete")


plt.figure(figsize=(16, 8))
plt.plot(average_2019.index, average_2019.values, label="2019 Average", color='purple', alpha=0.7)
plt.plot(average_2020.index, average_2020.values, label="2020 Average", color='blue', alpha=0.7)
plt.plot(average_2021.index, average_2021.values, label="2021 Average", color='orange', alpha=0.7)
plt.plot(average_2022.index, average_2022.values, label="2022 Average", color='green', alpha=0.7)
plt.plot(average_2023.index, average_2023.values, label="2023 Average", color='yellow', alpha=0.7)
plt.plot(average_2024.index, average_2024.values, label="2024 Average", color='red', alpha=0.7)

plt.title("Comparison of Boarding Averages by Time (2019~2024)", fontsize=16)
plt.xlabel("Time (e.g., 0b: Boarding at 0 AM)", fontsize=12)
plt.ylabel("Average Boarding Count", fontsize=12)
plt.xticks(rotation=90)
plt.legend(title="Year", loc='upper left')
plt.tight_layout()

plt.show()

import pandas as pd
import os

# Google Drive 내부 파일 탐색
drive_path = '/content/drive/MyDrive/Data'
print(os.listdir(drive_path))

df_subway_in_out_path = "/content/drive/MyDrive/Data/Average_Inflow_Outflow_Data.xlsx"
df_subway_in_out = pd.read_excel(df_subway_in_out_path)
df_subway_in_out.head()

df_pure_inflow, df_pure_outflow = df_subway_in_out['PURE_INFLOW'], df_subway_in_out['PURE_OUTFLOW']
df_pure_inflow, df_pure_outflow = df_pure_inflow[:20], df_pure_outflow[:20]
print(df_pure_inflow, df_pure_outflow)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math

# 감소량 % (우선 0~40%까지 조사?)
# inflow -> 18~19시 // outflow -> 08~09시의 데이터만 가지고 분석 (가장 혼잡할때만)

inflow = df_pure_inflow[13] # 18~19
outflow = df_pure_outflow[3] # 08~09

# reduce_ratio 설정
reduce_ratios = np.linspace(0, 0.55, 56)  # 0% ~ 40%, 1%씩 증가


base_distance = 0
inflow_reductions = []
outflow_reductions = []
# 감소량에 따른 reduced_inflow와 reduced_outflow 계산
# 출근시간 근무자는 70%로 가정
for reduce_ratio in reduce_ratios:
    reduced_inflow = inflow - (inflow * reduce_ratio * 0.7)
    reduced_outflow = outflow - (outflow * reduce_ratio * 0.7)
    inflow_reductions.append(reduced_inflow)
    outflow_reductions.append(reduced_outflow)

error_rate = 0.05 # 지하철 규격에 5%만큼 자재의 두께 등 고려
usable_v = 45.42*(1-error_rate)
original_inflow_distance = math.sqrt(usable_v/((inflow/270)-48))-base_distance
original_outflow_distance = math.sqrt(usable_v/((outflow/270)-48))-base_distance

reduced_inflow_distances = []
reduced_outflow_distances = []
# 감소량에 따른 거리변화
# 열차 한 칸 2호선 기준 좌석 48개, 면적 19.5x2.92 // 좌석 한칸 0.48x0.5
# 구한값이 45.42가 남는 면적*error_rate <- 이 면적을 사람수로 나눔
for i in range(len(inflow_reductions)) :
    reduced_inflow_distances.append(math.sqrt(usable_v/((inflow_reductions[i]/270)-48))-base_distance)
    reduced_outflow_distances.append(math.sqrt(usable_v/((outflow_reductions[i]/270)-48))-base_distance)

plt.figure(figsize=(10, 5))
plt.plot(reduce_ratios, reduced_inflow_distances, label="Reduced Inflow Distance", marker='o')
plt.axhline(y=original_inflow_distance, color='red', linestyle='--', label="Original Inflow Distance")
plt.title("Inflow Distance Change with Reduction Ratio", fontsize=16)
plt.xlabel("Reduction Ratio", fontsize=12)
plt.ylabel("Distance(m)", fontsize=12)
plt.legend(fontsize=12)
plt.grid(True)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

plt.figure(figsize=(10, 5))
plt.plot(reduce_ratios, reduced_outflow_distances, color='orange', label="Reduced outflow Distance", marker='o')
plt.axhline(y=original_outflow_distance, color='red', linestyle='--', label="Original outflow Distance")
plt.title("outflow Distance Change with Reduction Ratio", fontsize=16)
plt.xlabel("Reduction Ratio", fontsize=12)
plt.ylabel("Distance(m)", fontsize=12)
plt.legend(fontsize=12)
plt.grid(True)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

plt.show()

